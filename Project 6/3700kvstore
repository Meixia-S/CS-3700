#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, os
import random

BROADCAST = "FFFF"

"""
A class that is responsible for sending and receiving messages from other replicas inorder to fulfill clients' 
get and put requests. 
"""


class Replica:
    sockets = {}
    database = {}

    log = []
    new_entr = []
    content_to_send = []

    leader_id = BROADCAST

    current_term = 0
    voting_term = 0
    total_votes = 0
    no_vote = 0
    total_commit = 0
    commit_idx = 0

    updated = True
    diff_last_entr = False
    send_new_entries = True

    election_hb_timeout_seconds = random.randrange(3000, 6000) / 10000
    heartbeat_interval = 0.01
    heartbeat_timestamp = time.time()
    commit_timestamp = time.time()

    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        self.sockets[self.id] = self.socket

        print('Replica %s starting up' % self.id, flush=True)
        hello = {'src': self.id, 'dst': BROADCAST, 'leader': BROADCAST, 'type': 'hello', 'MID': 'hello1234'}
        self.send(hello)
        print('Sent hello message: %s' % hello, flush=True)

    def send(self, message):
        """ Sends messages through the socket to the client and replicas.

        :param message: the message that is being sent/broadcast
        :return: N/A
        """
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def run(self):
        """ The main method that preforms all the tasks around responding to client's requests and ensure consistency
            with all the replicates. The different types of messages that are sent from all involved parties are:
                - get and put: Requests from clients to put data into a database and get data from it as well
                - adp_entr: Used as heartbeats as well as telling other replicates to add new entries to logs and
                            database through a two phase committing protocol
                - commit: Sent by leaders and followers -
                            - leader: Sends it to followers to confirm a commit of new entries
                            - follower: Gives leader a "go ahead" to commit new entries. If they do not ready,
                                        they send this type of message to receive older entries to be sent. This
                                        process can happen over multiple exchanges between the leader and the replica.
                - request: Sent by a candidate to request followers to vote for them to become the next leader
                - voting: Sent by followers to vote for/against a candidate

        :return: N/A
        """
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.001)[0]

            for conn in socks:
                data = self.try_retrieving_data(conn)
                msg_json = json.loads(data)

                if msg_json['type'] == 'get' or msg_json['type'] == 'put':
                    if msg_json['leader'] == BROADCAST or self.leader_id == BROADCAST:
                        self.redirect_response(msg_json)

                    else:
                        self.content_to_send.append(msg_json)
                        self.new_entr.append(self.handle_log_and_database_msg(msg_json))

                elif msg_json['type'] == 'commit':
                    self.handle_commit_msg(msg_json)

                elif msg_json['type'] == 'apd_entr':
                    if msg_json['term'] >= self.current_term:
                        self.handle_append_entry_msg(msg_json)
                    else:
                        self.conduct_election()

                elif msg_json['type'] == 'request':
                    self.heartbeat_timestamp = time.time()
                    if self.voting_term != msg_json['term']:
                        self.leader_id = BROADCAST
                        self.voting(msg_json)

                elif msg_json['type'] == 'voting':
                    if msg_json['decision']:
                        self.total_votes += 1

                    else:
                        self.no_vote += 1

                print("Received Request '%s'" % msg_json, flush=True)

            self.check_if_won()
            self.check_if_commit()
            self.handle_timeout_and_elections()

    # Handle Response to Messages ------------------------------------------------------------------------------------------
    def handle_commit_msg(self, msg_json):
        """
        This handles the commit messages received by the replica by checking. It checks if a quorum exits and if there
        is no quorum, the necessary replicas (whose logs are not up-to-date), are updated. It increments the
        commit index if it is ready to commit.

        :param msg_json: The json msg that contains the new entries, commit index, and boolean for whether a quorum
                         exists or not.
        :return: N/A
        """
        rep_last_idx, rep_last_entr = self.getting_last_index()
        if self.id == self.leader_id:
            if msg_json['quorum']:
                self.total_commit += 1
            else:
                self.update_reps(msg_json)

        elif msg_json['src'] == self.leader_id and self.id != self.leader_id:

            if msg_json['dst'] == BROADCAST and self.updated:
                self.log.extend(msg_json['new_entr'])
                self.update_rep_database(msg_json['new_entr'])
                self.commit_idx = rep_last_idx

            elif msg_json['dst'] == self.id and 'new_entr' in msg_json:
                if self.diff_last_entr:
                    if len(self.log) > 0:
                        self.log.pop(rep_last_idx)
                else:
                    self.log = self.log[self.commit_idx:]

                self.log.extend(msg_json['new_entr'])
                self.update_rep_database(msg_json['new_entr'])
                self.commit_idx = rep_last_idx

                if self.commit_idx == msg_json['commit_idx']:
                    self.updated = True

    def handle_append_entry_msg(self, msg_json):
        """
        This handles the receiving of an append entry/heartbeat message from the leader. If a heartbeat is sent and
        the follower is updated, they do not send any response. If the follower is not updated, it will send a "commit"
        type message with the quorum field set to false in order to receive the necessary entries. If an append entry
        message is sent and the follower is not up-to-date, the follower will do the same as before and send a "commit"
        message. Otherwise, the follower will send a "commit" message with the quorum field set to True to indicate a
        commit should occur.

        :param msg_json: The json message that contains the term of the replica, last index, and last entries.
        :return: N/A
        """
        self.heartbeat_timestamp = time.time()
        self.leader_id = msg_json['leader']
        rep_last_idx, rep_last_entr = self.getting_last_index()
        self.election_hb_timeout_seconds = random.randrange(3000, 6000) / 10000

        if int(msg_json['term']) > self.current_term:
            self.current_term = msg_json['term']

        if msg_json['last_idx'] != rep_last_idx or msg_json['last_entr'] != rep_last_entr:
            commit_msg = {'src': self.id, 'dst': self.leader_id, 'type': 'commit', 'leader': self.leader_id,
                          'term': self.current_term, 'quorum': False, 'commit_idx': self.commit_idx}
            self.send(commit_msg)

            self.diff_last_entr = msg_json['last_entr'] != rep_last_entr and msg_json['last_idx'] == rep_last_idx
            self.updated = False

        elif 'new_entr' in msg_json:
            commit_msg = {'src': self.id, 'dst': self.leader_id, 'type': 'commit', 'leader': self.leader_id,
                          'term': self.current_term, 'quorum': True}
            self.send(commit_msg)

    # Handle Elections and Heartbeats --------------------------------------------------------------------------------------
    def handle_timeout_and_elections(self):
        """
        This determines if the leader should send another heartbeat or a regular append entry message and if a follower
        has timeout and needs to start their own election. This function will also resend append entry messages if
        the last append entry did not get majority agreement to commit new entries.

        :return: N/A
        """
        # checks to see if an election needs to be held (for reps only)
        time_diff = time.time() - self.heartbeat_timestamp
        if time_diff > self.election_hb_timeout_seconds and self.leader_id != self.id:
            self.leader_id = BROADCAST
            self.conduct_election()

        # checks to see if a heartbeat message needs to be sent (leader only)
        elif time_diff >= self.heartbeat_interval and self.leader_id == self.id:

            if not self.new_entr and not self.content_to_send:
                self.send_append_entry(True)

            elif not self.send_new_entries and time.time() - self.commit_timestamp >= self.heartbeat_interval:
                if time.time() - self.commit_timestamp >= (self.heartbeat_interval * 3):
                    self.conduct_election()
                else:
                    self.send_append_entry(False)
                    self.send_new_entries = False
                    self.commit_timestamp = time.time()

            elif not self.send_new_entries:
                self.send_append_entry(True)

            else:
                self.send_append_entry(False)
                self.send_new_entries = False
                self.commit_timestamp = time.time()

    def conduct_election(self):
        """ This starts an election for the candidate by sending a request type message to every replicate.

        :return: N/A
        """
        self.current_term += 1
        self.heartbeat_timestamp = time.time()
        last_idx, last_entr = self.getting_last_index()
        request_vote_rpc_msg = {'src': self.id, 'dst': BROADCAST, 'leader': BROADCAST, 'type': 'request',
                                'term': self.current_term, "last_idx": last_idx, "last_entr": last_entr}
        self.send(request_vote_rpc_msg)

    def check_if_won(self):
        """ This determines if the candidate got majority vote to become the next leader.

        :return: N/A
        """
        time_diff = time.time() - self.heartbeat_timestamp
        if self.total_votes >= math.floor(len(self.others) / 2):
            self.leader_id = self.id
            self.send_append_entry(True)
            self.total_votes = 0
            self.no_vote = 0
            self.election_hb_timeout_seconds = random.randrange(3000, 6000) / 10000

        elif self.no_vote > math.floor(len(self.others) / 2) or time_diff > (self.election_hb_timeout_seconds * 2):
            self.total_votes = 0
            self.no_vote = 0

    def voting(self, msg_json):
        """
        This allows for replicas to vote for or against a given candidate by sending a voting type message to them
        with their decision.

        :param msg_json: The json msg that contains the candidate's term, last index, and last entry.
        :return: N/A
        """
        msg_dst = msg_json['src']
        if self.qualifies(msg_json):
            self.leader_id = msg_json['src']
            in_favor_msg = {'src': self.id, 'dst': msg_dst, 'leader': self.leader_id, 'type': 'voting',
                            'term': self.current_term, 'decision': True}
            self.send(in_favor_msg)

        else:
            against_msg = {'src': self.id, 'dst': msg_dst, 'leader': self.leader_id, 'type': 'voting',
                           'term': self.current_term, 'decision': False}
            self.send(against_msg)

    def qualifies(self, msg_json):
        """
        This determines whether-or-not a candidate is valid and should be voted for.
            List of qualifications:
                    - the follower has not already voted in the round of elections
                    - candidate term must be equal or greater to follower's term
                    - the last index and last entry are the same between the two replicas
                    - the last index of the candidate is greater than the follower's

        :param msg_json: The json message that contains the candidate's term, last index, and last entry.
        :return: N/A
        """
        rep_last_idx, rep_last_entr = self.getting_last_index()
        has_not_voted_check = msg_json['term'] - self.voting_term >= 1  # was == 1
        term_larger_than_check = msg_json['term'] >= self.current_term
        last_idx_entry_equal_check = msg_json['last_idx'] == rep_last_idx and msg_json['last_entr'] == rep_last_entr
        last_idx_larger_check = msg_json['last_idx'] >= rep_last_idx
        if has_not_voted_check and term_larger_than_check and (last_idx_entry_equal_check or last_idx_larger_check):
            self.current_term = msg_json['term']
            self.voting_term += 1
            return True

        else:
            return False

    def send_append_entry(self, is_heartbeat):
        """
        The allows the leader to send append entries to replicas either as a heartbeat or request to
        append new entries into the database and log.

        :param is_heartbeat: This determines if the append entry is an empty one or if it has new entries to add.
        :return: N/A
        """
        self.heartbeat_timestamp = time.time()
        last_idx, last_entr = self.getting_last_index()
        batches = []

        if is_heartbeat:
            append_entry_msg = {'src': self.leader_id, 'dst': BROADCAST, 'type': 'apd_entr', 'leader': self.leader_id,
                                'term': self.current_term, 'last_idx': last_idx, 'last_entr': last_entr}
            self.send(append_entry_msg)

        else:
            if len(self.new_entr) > 50:
                append_entry_msg = {'src': self.leader_id, 'dst': BROADCAST, 'type': 'apd_entr',
                                    'leader': self.leader_id, 'term': self.current_term, 'last_idx': last_idx,
                                    'last_entr': last_entr, 'new_entr': batches[:50]}

                self.send(append_entry_msg)
            else:
                append_entry_msg = {'src': self.leader_id, 'dst': BROADCAST, 'type': 'apd_entr',
                                    'leader': self.leader_id, 'term': self.current_term, 'last_idx': last_idx,
                                    'last_entr': last_entr, 'new_entr': self.new_entr}
                self.send(append_entry_msg)

    # Handles Updating Rep Logs --------------------------------------------------------------------------------------------
    def check_if_commit(self):
        """
        This checks to see if the leader should commit the new entries into the database and log. If it can we call a
        function to do so.

        :return: N/A
        """
        if self.total_commit >= math.floor(len(self.others) / 2) and len(self.new_entr) > 0:
            self.send_new_entries = True
            self.total_commit = 0
            self.handle_put_get()

    def update_rep_database(self, entr_list):
        """ This update the replica's database (it only adds put requests to the database).

        :param entr_list: The list of entries that contain the type of request along with the key and value.
        :return: N/A
        """
        for entr in entr_list:
            if entr['type'] == 'put':
                self.database[entr['key']] = entr['value']

    def update_reps(self, msg_json):
        """
        This sends a message to a particular replica to update their log and database. This is done so by taking
        entries from the leaders log.

        :param msg_json: The json message containing the replica who needs entries to update their log and database
                         with and the last agreed upon commit index.
        :return: N/A
        """
        batches = []
        chunk_of_log = []

        if msg_json['commit_idx'] == self.commit_idx:
            chunk_of_log.append(self.log[self.commit_idx])
        else:
            chunk_of_log = self.log[msg_json['commit_idx']: self.commit_idx]

        if len(chunk_of_log) > 50:
            update_log_msg = {'src': self.leader_id, 'dst': msg_json['src'], 'type': 'commit',
                              'leader': self.leader_id, 'commit_idx': self.commit_idx, 'new_entr': batches[:50]}
            self.send(update_log_msg)
        else:
            update_log_msg = {'src': self.leader_id, 'dst': msg_json['src'], 'type': 'commit',
                              'leader': self.leader_id, 'commit_idx': self.commit_idx, 'new_entr': chunk_of_log}
            self.send(update_log_msg)

    def handle_log_and_database_msg(self, msg_json):
        """
        This crafts the message to be put into a leader log and contains information, such as the key and value, for the
        database.

        :param msg_json: The json message that is used to check the type of the message and retrieve the
        key/value pairs.
        :return: The json message that is eventually appended into replica logs.
        """
        if msg_json['type'] == 'put':
            database_info_json = {'type': msg_json['type'], 'term': self.current_term, 'key': msg_json['key'],
                                  'value': msg_json['value']}
        else:
            database_info_json = {'type': msg_json['type'], 'term': self.current_term, 'key': msg_json['key'],
                                  'value': ''}

        return database_info_json

    # Handle Client Requests -----------------------------------------------------------------------------------------------
    def handle_put_get(self):
        """
        This handles the put and get and get messages from a client. If this replica is the leader,
        it responds with a commit message broadcast to all other replicas and then responds with an ok or fail
        message and updates its list of new messages (to eventually ensure the database and logs are updated).
        If this replica is not the leader, the function returns.

        :return: N/A
        """
        if self.id == self.leader_id:
            if len(self.new_entr) > 50:
                temp_new_entry = self.new_entr[:50]
                commit_msg = {'src': self.leader_id, 'dst': BROADCAST, 'type': 'commit', 'term': self.current_term,
                              'leader': self.leader_id, 'new_entr': temp_new_entry}

            else:
                temp_new_entry = self.new_entr
                commit_msg = {'src': self.leader_id, 'dst': BROADCAST, 'type': 'commit', 'term': self.current_term,
                              'leader': self.leader_id, 'new_entr': temp_new_entry}

            self.send(commit_msg)

        else:
            return

        for i in range(len(temp_new_entry)):
            if self.content_to_send[i]['type'] == 'get':
                self.log.append(self.new_entr[i])
                self.handle_get_request(self.content_to_send[i])

            elif self.content_to_send[i]['type'] == 'put':
                self.log.append(self.new_entr[i])
                self.handle_put_request(self.content_to_send[i])

            else:
                self.fail_response(self.content_to_send[i])

        if len(self.new_entr) > 50:
            self.content_to_send = self.content_to_send[50:]
            self.new_entr = self.new_entr[50:]
        else:
            self.content_to_send = []
            self.new_entr = []

        last_idx, last_entr = self.getting_last_index()

        self.commit_idx = last_idx

    def handle_get_request(self, msg_json):
        """
        This handles the get request received from a client. It sends an ok response with the value for some key
        if the request can be granted, else, it sends an ok message with an empty value.
        :param msg_json:
        :return:he json message that will ultimately be used to decide who to send a response to and
        indicate what request the response is in regards.
        """
        key = msg_json['key']
        try:
            value = self.database[key]
            self.ok_response(True, value, msg_json)
        except KeyError:
            self.ok_response(True, '', msg_json)

    def handle_put_request(self, msg_json):
        """
        This handles the put request received from a client. It sends an ok response if the request can be granted
        else, it sends a fail message.

        :param msg_json: The json message that will ultimately be used to decide who to send a response to and
        indicate what request the response is in regards.
        :return: N/A
        """
        key = msg_json['key']
        self.database[key] = msg_json['value']
        try:
            db_value = self.database[key]
            msg_json_value = msg_json['value']
            self.ok_response(False, msg_json['value'], msg_json)
        except KeyError:
            self.fail_response(msg_json)

    def ok_response(self, is_get, value, msg_json):
        """
        This constructs and sends an ok message, indicating that a client's request was successfully handled.
        :param is_get: This indicates if the client sent a get request (true if the client did, else false).
        :param value: This is the value that the replica got in response to the client's request to get the value
        for some key.
        :param msg_json: The json message that contains the source, destination, and MID of the request, to be used
        to decide who to send the ok response to and indicate what request the response is in regards.
        :return: N/A
        """
        msg_src = msg_json['dst']
        msg_dst = msg_json['src']
        msg_mid = msg_json['MID']
        if is_get is True:
            ok_msg = {'src': msg_src, 'dst': msg_dst, 'leader': self.leader_id, 'type': 'ok', 'MID': msg_mid,
                      'value': value}

        else:
            ok_msg = {'src': msg_src, 'dst': msg_dst, 'leader': self.leader_id, 'type': 'ok', 'MID': msg_mid}

        self.send(ok_msg)

    def redirect_response(self, msg_json):
        """
        This constructs and sends a fail redirect, indicating that a request is to be redirected and the client
        should retry their request to the leader in the redirect message.

        :param msg_json: The json message that contains the source, destination, and MID of the request, to be used
        to decide who to send the redirect response to and indicate what request the response is in regards.
        :return: N/A
        """
        msg_src = msg_json['dst']
        msg_dst = msg_json['src']
        msg_mid = msg_json['MID']
        redirect_msg = {'src': msg_src, 'dst': msg_dst, 'leader': self.leader_id, 'type': 'redirect', 'MID': msg_mid}

        self.send(redirect_msg)

    def fail_response(self, msg_json):
        """
        This constructs and sends a fail message, indicating that a client should retry their request.

        :param msg_json: The json message that contains the source, destination, and MID of the request, to be used
        to decide who to send the fail response and indicate what request the response is in regards.
        :return: N/A
        """
        msg_src = msg_json['dst']
        msg_dst = msg_json['src']
        msg_mid = msg_json['MID']
        fail_msg = {'src': msg_src, 'dst': msg_dst, 'leader': self.leader_id, 'type': 'fail', 'MID': msg_mid}

        self.send(fail_msg)

    # Other ----------------------------------------------------------------------------------------------------------------
    @staticmethod
    def try_retrieving_data(conn):
        """
        This receives data and the address from the given connection and returns the data. The system exits if there
        is an OSError, TypeError, or ValueError.

        :param conn: The connection to receive data (varying types of messages) from.
        :return: The data received from the given connection.
        """
        try:
            data, addr = conn.recvfrom(65535)
            return data
        except OSError:
            sys.exit()
        except TypeError:
            sys.exit()
        except ValueError:
            sys.exit()

    def getting_last_index(self):
        """
        This retrieves the last index of the log and the entry at that last index in the log. If the log is empty,
        the last index is 0 and the entry is empty.

        :return: The last index of the log and the entry at that last index in the log. If the log is empty,
        0 and an empty dictionary are returned.
        """
        if len(self.log) == 0:
            return 0, {}
        else:
            return len(self.log) - 1, self.log[len(self.log) - 1]


if __name__ == "__main__":
    # This is the main method that parses the "port", "id", and "others" arguments given, forms and replica using them,
    # and runs the program.
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
